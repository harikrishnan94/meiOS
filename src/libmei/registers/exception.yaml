output: generated/exception.hpp

namespaces:
  - namespace:
      name: mei::registers::exception
      registers:
        # Current Exception Level
        # Holds the current Exception level.
        - register:
            name: CurrentEL
            type: u64
            system_name: CurrentEL
            fields:
              # Current Exception level. Possible values of this field are:
              #
              # 00 EL0
              # 01 EL1
              # 10 EL2
              # 11 EL3
              #
              # When the HCR_EL2.NV bit is 1, Non-secure EL1 read accesses to the CurrentEL register
              # return the value of 0x2 in this field.
              #
              # This field resets to a value that is architecturally UNKNOWN.
              - EL:
                2,2:
                  EL0: 0
                  EL1: 1
                  EL2: 2
                  EL3: 3

        # Exception Link Register - EL1
        # When taking an exception to EL1, holds the address to return to.
        - register:
            name: ELR_EL1
            type: u64
            system_name: ELR_EL1
            fields:
              - VAL: 0, 64

        # Exception Syndrome Register - EL1
        #
        # Holds syndrome information for an exception taken to EL1.
        - register:
            name: ESR_EL1
            type: u64
            system_name: ESR_EL1
            fields:
              # Exception Class. Indicates the reason for the exception that this register holds
              # information about.
              #
              # For each EC value, the table references a subsection that gives information about:
              #   - The cause of the exception, for example the configuration required to enable the
              #     trap.
              #   - The encoding of the associated ISS.
              #
              # Incomplete listing - to be done.
              - EC:
                26,6:
                  Unknown: 0b00_0000
                  TrappedWFIorWFE: 0b00_0001
                  TrappedMCRorMRC: 0b00_0011 # A32
                  TrappedMCRRorMRRC: 0b00_0100 # A32
                  TrappedMCRorMRC2: 0b00_0101 # A32
                  TrappedLDCorSTC: 0b00_0110 # A32
                  TrappedFP: 0b00_0111
                  TrappedMRRC: 0b00_1100 # A32
                  BranchTarget: 0b00_1101
                  IllegalExecutionState: 0b00_1110
                  SVC32: 0b01_0001 # A32
                  SVC64: 0b01_0101
                  HVC64: 0b01_0110
                  SMC64: 0b01_0111
                  TrappedMsrMrs: 0b01_1000
                  TrappedSve: 0b01_1001
                  PointerAuth: 0b01_1100
                  InstrAbortLowerEL: 0b10_0000
                  InstrAbortCurrentEL: 0b10_0001
                  PCAlignmentFault: 0b10_0010
                  DataAbortLowerEL: 0b10_0100
                  DataAbortCurrentEL: 0b10_0101
                  SPAlignmentFault: 0b10_0110
                  TrappedFP32: 0b10_1000 # A32
                  TrappedFP64: 0b10_1100
                  SError: 0b10_1111
                  BreakpointLowerEL: 0b11_0000
                  BreakpointCurrentEL: 0b11_0001
                  SoftwareStepLowerEL: 0b11_0010
                  SoftwareStepCurrentEL: 0b11_0011
                  WatchpointLowerEL: 0b11_0100
                  WatchpointCurrentEL: 0b11_0101
                  Bkpt32: 0b11_1000 # A32 BKTP instruction
                  Brk64: 0b11_1100 # A64 BRK instruction

              # Instruction Length for synchronous exceptions.
              - IL: 25,1

              # Instruction Specific Syndrome. Architecturally, this field can be defined independently
              # for each defined Exception class. However, in practice, some ISS encodings are used for
              # more than one Exception class.
              - ISS: 0,25

        # The stack pointer - EL0;
        # Holds the stack pointer associated with EL0. At higher Exception levels, this is used as the
        # current stack pointer when the value of SPSel.SP is 0.
        - register:
            name: SP_EL0
            type: u64
            system_name: SP_EL0
            fields:
              - VAL: 0, 64

        # Saved Program Status Register - EL1
        #
        # Holds the saved process state when an exception is taken to EL1.
        - register:
            name: SPSR_EL1
            type: u64
            system_name: SPSR_EL1
            fields:
              # Negative condition flag.
              #
              # Set to the value of the N condition flag on taking an exception to EL1, and copied to
              # the N condition flag on executing an exception return operation in EL1.
              #
              # Set to 1 if the result of the last flag-setting instruction was negative.
              - N: 31,1

              # Zero condition flag.
              #
              # Set to the value of the Z condition flag on taking an exception to EL1, and copied to
              # the Z condition flag on executing an exception return operation in EL1.
              #
              # Set to 1 if the result of the last flag-setting instruction was zero, and to 0
              # otherwise. A result of zero often indicates an equal result from a comparison.
              - Z: 30,1

              # Carry condition flag.
              #
              # Set to the value of the C condition flag on taking an exception to EL1, and copied to
              # the C condition flag on executing an exception return operation in EL1.
              #
              # Set to 1 if the last flag-setting instruction resulted in a carry condition, for example
              # an unsigned overflow on an addition.
              - C: 29,1

              # Overflow condition flag.
              #
              # Set to the value of the V condition flag on taking an exception to EL1, and copied to
              # the V condition flag on executing an exception return operation in EL1.
              #
              # Set to 1 if the last flag-setting instruction resulted in an overflow condition, for
              # example a signed overflow on an addition.
              - V: 28,1

              # Software step. Shows the value of PSTATE.SS immediately before the exception was taken.
              - SS: 21,1

              # Illegal Execution state bit. Shows the value of PSTATE.IL immediately before the
              # exception was taken.
              - IL: 20,1

              # Process state D mask. The possible values of this bit are:
              #
              # 0 Watchpoint, Breakpoint, and Software Step exceptions targeted at the current Exception
              #   level are not masked.
              #
              # 1 Watchpoint, Breakpoint, and Software Step exceptions targeted at the current Exception
              #   level are masked.
              #
              # When the target Exception level of the debug exception is higher than the current
              # Exception level, the exception is not masked by this bit.
              - D:
                9,1:
                  Unmasked: 0
                  Masked: 1

              # SError interrupt mask bit. The possible values of this bit are:
              #
              # 0 Exception not masked.
              # 1 Exception masked.
              - A:
                8,1:
                  Unmasked: 0
                  Masked: 1

              # IRQ mask bit. The possible values of this bit are:
              #
              # 0 Exception not masked.
              # 1 Exception masked.
              - I:
                7,1:
                  Unmasked: 0
                  Masked: 1

              # FIQ mask bit. The possible values of this bit are:
              #
              # 0 Exception not masked.
              # 1 Exception masked.
              - F:
                6,1:
                  Unmasked: 0
                  Masked: 1

              # AArch64 state (Exception level and selected SP) that an exception was taken from. The
              # possible values are:
              #
              # M[3:0] | State
              # --------------
              # 0b0000 | EL0t
              # 0b0100 | EL1t
              # 0b0101 | EL1h
              #
              # Other values are reserved, and returning to an Exception level that is using AArch64
              # with a reserved value in this field is treated as an illegal exception return.
              #
              # The bits in this field are interpreted as follows:
              #   - M[3:2] holds the Exception Level.
              #   - M[1] is unused and is RES 0 for all non-reserved values.
              #   - M[0] is used to select the SP:
              #     - 0 means the SP is always SP0.
              #     - 1 means the exception SP is determined by the EL.
              - M:
                0,4:
                  EL0t: 0b0000
                  EL1t: 0b0100
                  EL1h: 0b0101

        # Saved Program Status Register - EL2
        #
        # Holds the saved process state when an exception is taken to EL2.
        - register:
            name: SPSR_EL2
            type: u64
            system_name: SPSR_EL2
            fields:
              # Negative condition flag.
              #
              # Set to the value of the N condition flag on taking an exception to EL2, and copied to
              # the N condition flag on executing an exception return operation in EL2.
              #
              # Set to 1 if the result of the last flag-setting instruction was negative.
              - N: 31,1

              # Zero condition flag.
              #
              # Set to the value of the Z condition flag on taking an exception to EL2, and copied to
              # the Z condition flag on executing an exception return operation in EL2.
              #
              # Set to 1 if the result of the last flag-setting instruction was zero, and to 0
              # otherwise. A result of zero often indicates an equal result from a comparison.
              - Z: 30,1

              # Carry condition flag.
              #
              # Set to the value of the C condition flag on taking an exception to EL2, and copied to
              # the C condition flag on executing an exception return operation in EL2.
              #
              # Set to 1 if the last flag-setting instruction resulted in a carry condition, for example
              # an unsigned overflow on an addition.
              - C: 29,1

              # Overflow condition flag.
              #
              # Set to the value of the V condition flag on taking an exception to EL2, and copied to
              # the V condition flag on executing an exception return operation in EL2.
              #
              # Set to 1 if the last flag-setting instruction resulted in an overflow condition, for
              # example a signed overflow on an addition.
              - V: 28,1

              # Software step. Shows the value of PSTATE.SS immediately before the exception was taken.
              - SS: 21,1

              # Illegal Execution state bit. Shows the value of PSTATE.IL immediately before the
              # exception was taken.
              - IL: 20,1

              # Process state D mask. The possible values of this bit are:
              #
              # 0 Watchpoint, Breakpoint, and Software Step exceptions targeted at the current Exception
              #   level are not masked.
              #
              # 1 Watchpoint, Breakpoint, and Software Step exceptions targeted at the current Exception
              #   level are masked.
              #
              # When the target Exception level of the debug exception is higher than the current
              # Exception level, the exception is not masked by this bit.
              - D:
                9,1:
                  Unmasked: 0
                  Masked: 1

              # SError interrupt mask bit. The possible values of this bit are:
              #
              # 0 Exception not masked.
              # 1 Exception masked.
              - A:
                8,1:
                  Unmasked: 0
                  Masked: 1

              # IRQ mask bit. The possible values of this bit are:
              #
              # 0 Exception not masked.
              # 1 Exception masked.
              - I:
                7,1:
                  Unmasked: 0
                  Masked: 1

              # FIQ mask bit. The possible values of this bit are:
              #
              # 0 Exception not masked.
              # 1 Exception masked.
              - F:
                6,1:
                  Unmasked: 0
                  Masked: 1

              # AArch64 state (Exception level and selected SP) that an exception was taken from. The
              # possible values are:
              #
              # M[3:0] | State
              # --------------
              # 0b0000 | EL0t
              # 0b0100 | EL1t
              # 0b0101 | EL1h
              # 0b1000 | EL2t
              # 0b1001 | EL2h
              #
              # Other values are reserved, and returning to an Exception level that is using AArch64
              # with a reserved value in this field is treated as an illegal exception return.
              #
              # The bits in this field are interpreted as follows:
              #   - M[3:2] holds the Exception Level.
              #   - M[1] is unused and is RES 0 for all non-reserved values.
              #   - M[0] is used to select the SP:
              #     - 0 means the SP is always SP0.
              #     - 1 means the exception SP is determined by the EL.
              - M:
                0,4:
                  EL0t: 0b0000
                  EL1t: 0b0100
                  EL1h: 0b0101
                  EL2t: 0b1000
                  EL2h: 0b1001
